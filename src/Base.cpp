// Подключаем заголовочный файл класса Base
// Это необходимо для реализации методов класса
#include "Base.h"

// Для работы с потоками ввода-вывода (необязательно, но может понадобиться для отладки)
#include <iostream>

// Конструктор по умолчанию для класса Base
// Вызывается при создании объектов производных классов
Base::Base() {
    // В базовом абстрактном классе конструктор может быть пустым,
    // так как сам класс не содержит данных-членов
    // Однако он важен для инициализации виртуальной таблицы
    std::cout << "Base default constructor called" << std::endl;
}

// Виртуальный деструктор
// ОБЯЗАТЕЛЕН для корректного удаления объектов производных классов
// Без виртуального деструктора удаление через указатель на Base 
// приведет к неопределенному поведению
Base::~Base() {
    // Вывод отладочной информации для демонстрации работы деструктора
    // В реальном проекте может быть убран
    std::cout << "Base destructor called" << std::endl;
}

// ПРИМЕЧАНИЕ: В этом файле НЕ реализуются чисто виртуальные методы:
// - print()
// - saveToFile()
// - loadFromFile()
// - setName()
// - getName()

// Эти методы должны быть реализованы в производных классах:
// Hero, Villain, Monster

// Чисто виртуальные функции (= 0 в объявлении) делают класс абстрактным
// Это означает, что нельзя создать объект класса Base напрямую:
// Base obj; // ОШИБКА компиляции!

// Можно работать только с указателями или ссылками на Base,
// которые фактически указывают на объекты производных классов
