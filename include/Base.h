#ifndef BASE_H                    // Защита от повторного включения файла
#define BASE_H                    // Определение макроса BASE_H

#include <string>                 // Подключение библиотеки для работы со строками
#include <iostream>               // Подключение библиотеки ввода-вывода
#include <fstream>                // Подключение библиотеки для работы с файлами

class Base {                      // Объявление базового класса Base
public:
    // Конструкторы
    Base();                       // Конструктор по умолчанию
    Base(const std::string& name); // Конструктор с параметром (имя)
    Base(const Base& other);      // Конструктор копирования

    // Виртуальный деструктор
    virtual ~Base();              // Виртуальный деструктор для корректного удаления наследников

    // Оператор присваивания
    Base& operator=(const Base& other); // Перегрузка оператора присваивания

    // Чисто виртуальные функции (делают класс абстрактным)
    virtual void display() const = 0;    // Чисто виртуальный метод для отображения данных
    virtual void edit() = 0;             // Чисто виртуальный метод для редактирования данных
    virtual std::string getType() const = 0; // Чисто виртуальный метод для получения типа объекта

    // Виртуальные методы для работы с файлами
    virtual void saveToFile(std::ofstream& file) const = 0;  // Чисто виртуальный метод сохранения в файл
    virtual void loadFromFile(std::ifstream& file) = 0;      // Чисто виртуальный метод загрузки из файла

    // Get/Set методы
    std::string getName() const;  // Метод для получения имени
    void setName(const std::string& name); // Метод для установки имени

protected:
    std::string name;             // Защищенное поле для хранения имени
};

#endif                           // Конец защиты от повторного включения
