#ifndef KEEPER_H                    // Защита от повторного включения файла
#define KEEPER_H                    // Определение макроса для защиты

#include "Base.h"                   // Подключение базового абстрактного класса
#include "Hero.h"                   // Подключение класса Hero (положительный герой)
#include "Villain.h"                // Подключение класса Villain (злодей)
#include "Monster.h"                // Подключение класса Monster (монстр)
#include <fstream>                  // Подключение библиотеки для работы с файлами

class Keeper {                      // Объявление класса Keeper - контейнер для объектов
private:                            // Секция приватных членов класса
    Base** data;                    // Двойной указатель - массив указателей на объекты Base
    int size;                       // Текущее количество элементов в контейнере
    int capacity;                   // Вместимость контейнера (размер выделенной памяти)

    void resize();                  // Приватный метод для увеличения вместимости контейнера

public:                             // Секция публичных методов класса
    Keeper();                       // Конструктор по умолчанию
    ~Keeper();                      // Деструктор для освобождения памяти

    void add(Base* item);           // Метод добавления элемента в контейнер
    void remove(int index);         // Метод удаления элемента по индексу
    void displayAll() const;        // Метод отображения всех элементов (const - не изменяет объект)
    void edit(int index);           // Метод редактирования элемента по индексу

    // Полноценные методы работы с файлами
    void saveToFile(const std::string& filename) const;  // Сохранение всех данных в файл
    void loadFromFile(const std::string& filename);      // Загрузка данных из файла

    int getSize() const;            // Get-метод для получения текущего размера контейнера
    Base* get(int index) const;     // Get-метод для получения элемента по индексу

    class Exception {               // Вложенный класс для обработки исключений
    private:                        // Приватная секция класса исключений
        std::string message;        // Сообщение об ошибке
    public:                         // Публичная секция класса исключений
        Exception(const std::string& msg) : message(msg) {}  // Конструктор исключения с сообщением
        std::string getMessage() const { return message; }   // Get-метод для получения сообщения
    };
};

#endif                              // Конец защиты от повторного включения
