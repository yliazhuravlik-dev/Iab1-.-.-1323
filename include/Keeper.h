// Препроцессор проверяет, не был ли уже определен символ KEEPER_H
// Если не был - определяет его и компилирует код до #endif
#ifndef KEEPER_H
#define KEEPER_H

// Подключаем заголовочный файл базового класса Base
#include "Base.h"

// Подключаем стандартную библиотеку строк (string)
#include <string>

// Объявление класса Keeper - основного контейнера для управления объектами
class Keeper {
// Секция private - члены класса, доступные только внутри методов этого класса
private:
    // Двойной указатель на базовый класс Base
    // data - это указатель на массив указателей на объекты Base
    Base** data;
    
    // Текущее количество элементов в контейнере
    int size;
    
    // Вместимость (capacity) контейнера - максимальное количество элементов, для которого выделена память в текущий момент
    int capacity;
    
    // Приватный вспомогательный метод для увеличения вместимости контейнера, пользователь класса не имеет прямого доступа к этому методу
    void resize();

// Секция public - интерфейс класса, доступный пользователю
public:
    // Конструктор по умолчанию, инициализирует пустой контейнер с начальной вместимостью
    Keeper();
    
    // Конструктор копирования, создает глубокую копию другого объекта Keeper
    Keeper(const Keeper& other);
    
    // Деструктор: освобождает всю динамически выделенную память, удаляет все объекты в контейнере и сам массив указателей
    ~Keeper();
    
    // Метод для добавления нового элемента в контейнер
    // Принимает указатель на объект типа Base (или его наследников), класс Keeper принимает владение объектом (будет отвечать за его удаление)
    void add(Base* element);
    
    // Метод для удаления элемента по индексу, удаляет объект из памяти и сдвигает остальные элементы
    void remove(int index);
    
    // Метод для вывода информации о всех элементах контейнера, вызывает метод print() для каждого элемента
    void printAll() const;
    
    // Метод для сохранения всех данных контейнера в файл, принимает строку с именем файла для сохранения
    void saveToFile(const std::string& filename) const;
    
    // Метод для загрузки данных контейнера из файла, принимает строку с именем файла для загрузки
    void loadFromFile(const std::string& filename);
    
    // Метод для получения элемента по индексу (без передачи владения)
    // Принимает целочисленный индекс элемента, возвращает указатель на объект Base (не передает владение)
    Base* getElement(int index) const;
    
    // Get-метод для получения текущего количества элементов, константный метод - не изменяет состояние объекта, возвращает значение поля size
    int getSize() const;
    
    // Get-метод для получения текущей вместимости контейнера, константный метод - не изменяет состояние объекта, возвращает значение поля capacity
    int getCapacity() const;

    // Перегрузка оператора присваивания, обеспечивает корректное присваивание объектов Keeper
    Keeper& operator=(const Keeper& other);
};

#endif
